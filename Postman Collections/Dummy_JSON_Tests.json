{
	"info": {
		"_postman_id": "8d490878-d8e3-46ab-9fb2-631fa62a1381",
		"name": "Dummy JSON",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Test Connection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23d8bf6a-9397-4151-89f9-2f7e45d42ee1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    if (pm.response.code !== 200) {\r",
							"        pm.expect.fail(\"Skipping next tests as the status code is not 200\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "57484b9f-3b74-4fee-b21e-cfebc00b59b5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/test"
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "80f3759f-993a-4790-b235-bc87ffd6d94d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"All users returned successfully\", function () {\r",
							"    pm.expect(pm.response.json().users).to.have.lengthOf(30);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"User list is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.users.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"First user has required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (jsonData.users.length > 0) {\r",
							"        let firstUser = jsonData.users[0];\r",
							"        pm.expect(firstUser).to.have.property(\"id\");\r",
							"        pm.expect(firstUser).to.have.property(\"firstName\");\r",
							"        pm.expect(firstUser).to.have.property(\"email\");\r",
							"        pm.expect(firstUser.id).to.be.a(\"number\");\r",
							"        pm.expect(firstUser.firstName).to.be.a(\"string\");\r",
							"        pm.expect(firstUser.email).to.include(\"@\");\r",
							"    } else {\r",
							"        pm.fail(\"User list is empty, cannot check required fields\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "51c8a93f-1c33-4388-9afb-a72928ae7483",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/users"
			},
			"response": []
		},
		{
			"name": "Get User With Random ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5b80bf0a-6f88-44c7-869f-604cc2d16816",
						"exec": [
							"const lodash = require('lodash');\r",
							"\r",
							"pm.collectionVariables.set(\"randomUserId\", lodash.random(1,30));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "50aac457-65e6-483d-99ec-b77d6087cac6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const id = pm.collectionVariables.get(\"randomUserId\");\r",
							"\r",
							"pm.test(\"User ID is equal to randomNum variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.equal(id);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"User has required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
							"});\r",
							"\r",
							"pm.test(\"User age is valid (if exists)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (jsonData.age) {\r",
							"        pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"        pm.expect(jsonData.age).to.be.above(0);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"userName\", pm.response.json().username);\r",
							"\r",
							"pm.collectionVariables.set(\"userPassword\", pm.response.json().password);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "1e08fe50-d427-46f7-a6e0-e5862e55e7c4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/user/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{randomUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Log In User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a578350-f9df-4def-8bd5-504ffd16f54f",
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains access token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
							"    pm.expect(jsonData.accessToken).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"usersToken\", pm.response.json().accessToken);\r",
							"\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.email).to.include(\"@\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f796b11c-877f-467d-8b81-a5dd5350418c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{userName}}\",\r\n    \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/auth/login"
			},
			"response": []
		},
		{
			"name": "Get Current User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a95baa00-29ae-4cde-a1fc-a302ca1f5bd5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.email).to.include(\"@\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct user is logged in\", function () {\r",
							"    pm.expect(responseBody.username).to.equal(pm.collectionVariables.get(\"userName\"));\r",
							"    pm.expect(responseBody.password).to.equal(pm.collectionVariables.get(\"userPassword\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c34154ca-b65a-4112-9f87-76e6c376883e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/auth/me"
			},
			"response": []
		},
		{
			"name": "Add Mock User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a95baa00-29ae-4cde-a1fc-a302ca1f5bd5",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains added user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
							"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
							"    pm.expect(jsonData).to.have.property(\"age\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"});\r",
							"\r",
							"pm.test(\"User email is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.include(\"@\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b9e8f9dd-c931-46ea-ba2b-7e6ca73c2d29",
						"exec": [
							"const lodash = require('lodash');\r",
							"\r",
							"pm.collectionVariables.set(\"randomAge\", lodash.random(18,70));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "956f1246-eefb-478f-bfd2-a4606d4154e1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"age\": {{randomAge}},\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/users/add"
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a95baa00-29ae-4cde-a1fc-a302ca1f5bd5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User data updates properly\", function() {\r",
							"    pm.expect(pm.response.json().firstName).to.equal(pm.collectionVariables.get(\"patchName\"));\r",
							"    pm.expect(pm.response.json().lastName).to.equal(pm.collectionVariables.get(\"patchLastName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b9e8f9dd-c931-46ea-ba2b-7e6ca73c2d29",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d53024ae-70e2-482b-bdd7-675d381cad03",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"{{patchName}}\",\r\n    \"lastName\": \"{{patchLastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{randomUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a95baa00-29ae-4cde-a1fc-a302ca1f5bd5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"User deletion confirmation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"isDeleted\", true);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b9e8f9dd-c931-46ea-ba2b-7e6ca73c2d29",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "25b6b441-cc84-4057-a27b-ae736954881f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{randomUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3a7cd7c-3acb-4c62-b9b6-bff3369e8662",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'products' key\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"products\");\r",
							"    pm.expect(jsonData.products).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Product list is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.products.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"First product has required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (jsonData.products.length > 0) {\r",
							"        let firstProduct = jsonData.products[0];\r",
							"        pm.expect(firstProduct).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(firstProduct).to.have.property(\"title\").that.is.a(\"string\");\r",
							"        pm.expect(firstProduct).to.have.property(\"price\").that.is.a(\"number\");\r",
							"    } else {\r",
							"        pm.fail(\"Product list is empty, cannot check required fields\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Product IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let productIds = jsonData.products.map(product => product.id);\r",
							"    let uniqueIds = new Set(productIds);\r",
							"    pm.expect(productIds.length).to.eql(uniqueIds.size);\r",
							"});\r",
							"\r",
							"pm.test(\"Product prices are valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.products.forEach(product => {\r",
							"        pm.expect(product.price).to.be.a(\"number\");\r",
							"        pm.expect(product.price).to.be.above(0);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "20e14cda-5936-43ba-af67-7a5c39ff0384",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{url}}/products"
			},
			"response": []
		},
		{
			"name": "Get Products Limit And Skip",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48fcd238-c04f-46ff-a703-afde7df16826",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of products returned equals limit\", function () {\r",
							"    pm.expect(pm.response.json().products.length).to.equal(pm.response.json().limit);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Number of returned products matches limit\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.products.length).to.be.at.most(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Products IDs are within the given range\", function () {\r",
							"    pm.response.json().products.forEach(function(product) {\r",
							"        pm.expect(product.id).to.be.within(pm.response.json().skip + 1, pm.response.json().limit + pm.response.json().skip);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "fecb88d1-9a88-4d18-9102-20908ff4b371",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/products/?limit=10&skip=7",
					"host": [
						"{{url}}"
					],
					"path": [
						"products",
						""
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "skip",
							"value": "7"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fc5dd008-406a-4a99-bf47-398a02b28323",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1d9aa65d-2e99-4cd9-9c8d-1452174eb816",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 500ms\", function() {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://dummyjson.com",
			"type": "string"
		},
		{
			"key": "randomUserId",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		},
		{
			"key": "usersToken",
			"value": ""
		},
		{
			"key": "randomAge",
			"value": "",
			"type": "string"
		},
		{
			"key": "patchName",
			"value": "",
			"type": "string"
		},
		{
			"key": "patchLastName",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomNum",
			"value": ""
		}
	]
}